version: '3.9'

services:
#Messaging
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 1s
      timeout: 3s
      retries: 30
    ports:
      - "5672:5672"
      - "15672:15672"
  
#Cache
  redis:
    image: 'redislabs/redisearch:latest'
    container_name: 'redis'
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping | grep PONG" ]
      interval: 1s
      timeout: 3s
      retries: 5
    ports:
      - '6379:6379'

#Database
  patient-db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      MSSQL_SA_PASSWORD: "SuperSecret7!"
      ACCEPT_EULA: "Y"
    ports:
      - "1433:1433"
    volumes:
      - mssql_data_patient_db:/var/opt/mssql

  measurement-db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    environment:
      MSSQL_SA_PASSWORD: "SuperSecret7!"
      ACCEPT_EULA: "Y"
    ports:
      - "1434:1433"
    volumes:
      - mssql_data_measurement_db:/var/opt/mssql
  
#Feature flags
  featurehub:
    image: featurehub/party-server:latest
    restart: always
    volumes:
      - featurehub-h2-data:/db
    ports:
      - 8085:8085

#Monitoring
  seq:
    image: datalust/seq:latest
    ports:
      - "5341:5341"
      - "5342:80"
    volumes:
      - seq_data:/data
    environment:
      ACCEPT_EULA: "Y"

  zipkin:
    image: openzipkin/zipkin
    ports:
      - "9411:9411"
    depends_on:
      - patient-service
      - measurement-service
      - seq
  
  #APIS
  apigateway:
    image: apigateway
    build:
      context: .
      dockerfile: ./DLS2/APIGateway/Dockerfile
    ports:
      - '5206:80'

  measurement-service:
    image: measurementservice
    build:
      context: .
      dockerfile: ./DLS2/MeasurementService/Dockerfile
    ports:
      - '9090:80'
    depends_on:
      redis:
        condition: service_healthy
      measurement-db:
        condition: service_started
      apigateway:
        condition: service_started


  patient-service:
    image: patientservice
    build:
      context: .
      dockerfile: ./DLS2/PatientService/Dockerfile
    ports:
      - '9092:80'
    depends_on:
      redis:
        condition: service_healthy
      patient-db:
        condition: service_started
      apigateway:
        condition: service_started
      featurehub:
        condition: service_started
      
#Frontend
  doctor-ui:
    ports:
      - '8082:80'
    build:
      context: .
      dockerfile: ./DoctorUI/Dockerfile
    volumes:
      - ./DoctorUI/src:/app/src:delegated
    networks:
      - local_network
    depends_on:
      - patient-service
      - measurement-service

  patient-ui:
    ports:
      - '8083:80'
    build:
      context: .
      dockerfile: ./PatientUI/Dockerfile
    volumes:
      - ./PatientUI/src:/app/src:delegated
    networks:
      - local_network
    depends_on:
      - measurement-service

volumes:
  seq_data:
  mssql_data_measurement_db:
  mssql_data_patient_db:
  featurehub-h2-data:
    
networks:
  local_network:
    driver: bridge